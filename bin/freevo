#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
# -----------------------------------------------------------------------------
# freevo - the main entry point to the whole suite of applications
# -----------------------------------------------------------------------------
# $Id$
#
# -----------------------------------------------------------------------------
# Freevo - A Home Theater PC framework
# Copyright (C) 2002-2005 Krister Lagerstrom, Dirk Meyer, et al.
#
# First Edition: Dirk Meyer <dischi@freevo.org>
# Maintainer:    Dirk Meyer <dischi@freevo.org>
#
# Please see the file doc/CREDITS for a complete list of authors.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MER-
# CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# -----------------------------------------------------------------------------

import os
import sys
import popen2

from signal import *


def show_help():
    """
    show how to use this script
    """
    helper_list = ''
    for helper in os.listdir(os.environ['FREEVO_HELPERS']):
        if helper.endswith('.py') and not helper == '__init__.py':
            helper_list += '  ' + helper[:-3] + '\n'

    print '''\
freevo [ script | options]
options:
  -fs            start freevo in a new x session in fullscreen
  setup          run freevo setup to scan your environment
  start          start freevo as daemon in background
  stop           stop the current freevo process

freevo can start the following scripts, use --help on these
scripts to get more informations about options.

%s

Example: freevo imdb --help"
         freevo webserver start"

You can also create a symbolic link to freevo with the name of the
script you want to execute. E.g. put a link imdb pointing to freevo
in your path to access the imdb helper script

Example: ln -s path-to-freevo imdb
         imdb --help

Before running freevo the first time, you need to run \'freevo setup\'
After that, you can run freevo without parameter.
    ''' % helper_list
    sys.exit(0)



def get_python(check_freevo):
    """
    get the newest version of python [ with freevo installed ]
    """
    if float(sys.version[0:3]) >= 2.3:
        # python seems to be ok
        search = ('python', 'python2')
    elif float(sys.version[0:3]) >= 2.2:
        # try python2.3, else take python
        search = ('python2.3', 'python')
    else:
        # python is too old, try to find python2.3 or python2
        search = ('python2.3', 'python2')

    for python in search:
        for path in os.environ['PATH'].split(':'):
            if os.path.isfile(os.path.join(path, python)):
                # we found the binary for python
                if not check_freevo:
                    # return if we don't check for an installed version
                    # of freevo
                    return python

                # try to import freevo with this python and get
                # the path
                cmd = '%s -c "import freevo; print freevo.__path__[0]"' % python
                child = popen2.Popen4(cmd)
                while 1:
                    data = child.fromchild.readline()
                    if not data:
                        break
                    if os.path.isdir(data[:-1]):
                        # ok, found it, close child and return
                        child.wait()
                        child.fromchild.close()
                        if child.childerr:
                            child.childerr.close()
                        child.tochild.close()
                        return python, data[:-1]

                child.wait()
                child.fromchild.close()
                if child.childerr:
                    child.childerr.close()
                child.tochild.close()

    # nothing found? That's bad!
    if check_freevo:
        return None, None
    return None


                
def getpid(name, arg):
    """
    get pid of running 'name'
    """
    for fname in ('/var/run/' + name  + '-%s.pid' % os.getuid(), 
                  '/tmp/' + name + '-%s.pid' % os.getuid()):
        if os.path.isfile(fname):
            f = open(fname)
            uid = int(f.readline()[:-1])
            f.close()

            proc = '/proc/' + str(uid) + '/cmdline'
            # FIXME: BSD support missing here
            try:
                if os.path.isfile(proc):
                    f = open(proc)
                    proc_arg = f.readline().split('\0')[:-1]
                    f.close()
                else:
                    # process not running
                    return fname, 0

            except (OSError, IOError):
                # running, but not freevo (because not mine)
                return fname, 0

            if '-OO' in proc_arg:
                proc_arg.remove('-OO')
                
            if proc_arg and ((arg[0].find('runapp') == -1 and \
                              len(proc_arg)>2 and arg[1] != proc_arg[1]) or \
                             len(proc_arg)>3 and arg[2] != proc_arg[2]):
                # different proc I guess
                try:
                    os.unlink(fname)
                except OSError:
                    pass
                return fname, 0
            return fname, uid
    return fname, 0


def stop(name, arg):
    """
    stop running process 'name'
    """
    fname, uid = getpid(name, arg)
    if not uid:
        return 0
    try:
        try:
            os.unlink(fname)
        except OSError:
            pass
        os.kill(uid, SIGINT)
        return 1
    except OSError:
        return 0



def start(name, arg, bg, store=1):
    """
    start a process
    """
    uid = os.fork()
    if uid:
        if store:
            try:
                f = open('/var/run/' + name + '-%s.pid' % os.getuid(), 'w')
            except (OSError, IOError):
                f = open('/tmp/' + name + '-%s.pid' % os.getuid(), 'w')

            f.write(str(uid)+'\n')
            f.close()

        if not bg:
            try:
                os.waitpid(uid, 0)
            except KeyboardInterrupt:
                try:
                    os.kill(uid, SIGINT)
                    try:
                        os.waitpid(uid, 0)
                    except KeyboardInterrupt:
                        pass
                except OSError:
                    pass
                if store and os.path.isfile(f.name):
                    os.unlink(f.name)
    else:
        if bg:
            # close logging fd
            os.close(2)
            os.open('/dev/null', os.O_WRONLY)
            
        os.execvp(arg[0], arg)


freevo_script = os.path.abspath(sys.argv[0])
if os.path.islink(freevo_script):
    freevo_script = os.readlink(freevo_script)

if not os.path.isfile(freevo_script):
    for path in os.environ['PATH'].split(':'):
        if os.path.isfile(os.path.join(path, freevo_script)):
            freevo_script = os.path.join(path, freevo_script)


# fix python path
__site__ = '../lib/python%s.%s/site-packages' % sys.version_info[:2]
__site__ = os.path.normpath(os.path.join(os.path.dirname(__file__), __site__))
__site__ = os.path.join(__site__, 'ui')

# extend PYTHONPATH to freevo
if os.environ.has_key('PYTHONPATH'):
    os.environ['PYTHONPATH'] = '%s:%s' % (__site__, os.environ['PYTHONPATH'])
else:
    os.environ['PYTHONPATH'] = __site__


import freevo.version
python, freevo_python = get_python(1)
if not python:
    print 'can\'t find python version with installed freevo'
    sys.exit(0)

freevo_helpers = os.path.join(freevo_python, 'helpers')
dname = os.path.abspath(os.path.join(os.path.dirname(freevo_script), '../'))
freevo_locale  = os.path.join(dname, 'share/locale')
freevo_share   = os.path.join(dname, 'share/freevo')
freevo_doc     = os.path.join(dname, 'share/doc/freevo-%s' % freevo.version.__version__)
freevo_config  = os.path.join(freevo_share, 'freevo_config.py')
runapp         = ''
python = [ python ]

os.environ['PYTHONPATH'] = '%s:%s' % (freevo_python, os.environ['PYTHONPATH'])

# add the variables from above into environ so Freevo can use them, too
for var in ('freevo_script', 'runapp', 'freevo_python', 'freevo_locale', 'freevo_doc',
            'freevo_share', 'freevo_config', 'freevo_helpers'):
    os.environ[var.upper()] = eval(var)

# extend PATH to make sure the basics are there
os.environ['PATH'] = '%s:/usr/bin:/bin:/usr/local/bin:' % os.environ['PATH'] + \
                     '/usr/X11R6/bin/:/sbin:/usr/sbin'

# set basic env variables
if not os.environ.has_key('HOME') or not os.environ['HOME']:
    os.environ['HOME'] = '/root'
if not os.environ.has_key('USER') or not os.environ['USER']:
    os.environ['USER'] = 'root'

# now check what and how we should start freevo
bg    = 0 # start in background
proc  = [ os.path.abspath(os.path.join(freevo_python, 'helpers/main.py')) ]
name  = os.path.splitext(os.path.basename(os.path.abspath(sys.argv[0])))[0]
check = 1 # check running instance

if len(sys.argv) > 1:
    arg = sys.argv[1]
else:
    arg = ''


# check the arg

if arg in ('--help', '-h'):
    # show help
    show_help()

    
if arg == 'stop':
    # stop running freevo
    if not stop(name, python + proc):
        print 'freevo not running'
    sys.exit(0)
    
elif arg == 'start':
    # start freevo in background
    sys.argv = [ sys.argv[0] ]
    bg = 1


elif arg == '-fs':
    # start X server and run freevo, ignore everything else for now
    server_num = 0
    while 1:
        if not os.path.exists('/tmp/.X11-unix/X' + str(server_num)):
            break
        server_num += 1
    sys.stdin.close()
    os.execvp('xinit', [ 'xinit', freevo_script, '-force-fs',  '--', ':'+str(server_num) ])

    
elif arg == 'execute':
    # execute a python script
    proc  = sys.argv[2:]
    check = 0

elif arg == 'setup':
    # run setup
    proc = [ os.path.join(freevo_python, 'config/setup.py') ] + sys.argv[2:]


elif arg == 'prompt':
    # only run python inside the freevo env
    proc = []
    check = 0


elif arg == 'runapp':
    # Oops, runapp. We don't start python, we start sys.argv[1]
    # with the rest as args
    python[-1] = sys.argv[2]
    proc       = sys.argv[3:]
    check      = 0

elif arg and name == 'freevo' and not arg.startswith('-'):
    # start a helper. arg is the name of the script in
    # the helpers directory
    name     = arg
    proc     = [ os.path.join(freevo_python, 'helpers', name + '.py') ]
    if len(sys.argv) >= 2:
        if len(sys.argv) > 2 and sys.argv[2] == 'stop':
            if not stop(name, python + proc):
                print '%s not running' % name
            sys.exit(0)
        if len(sys.argv) > 2 and sys.argv[2] == 'start':
            bg = 1
            sys.argv = [ sys.argv[0] ]
        else:
            sys.argv = [ sys.argv[0] ] + sys.argv[2:]


elif arg and name == 'freevo' and not (arg in ['-force-fs',]):
    # ok, don't know about that arg, freevo should be started, but
    # it's also no freevo arg
    print 'unknown command line option: %s' % sys.argv[1:]
    print
    show_help()


else:
    # arg for freevo
    proc += sys.argv[1:]
    

if name != 'freevo':
    proc = [ os.path.join(freevo_python, 'helpers', name + '.py') ] +  sys.argv[1:]
    if not os.path.isfile(proc[0]):
        if os.path.isfile(name):
            name = os.path.splitext(os.path.basename(name))[0]
            proc = proc[1:]
        else:
            proc = [ os.path.join(freevo_python, 'helpers', name + '.py') ] +  sys.argv[1:]
            print 'can\'t find helper %s' % name
            sys.exit(1)

if getpid(name, python + proc)[1] and check:
    if name != 'freevo':
        print '%s still running, run \'freevo %s stop\' to stop' % (name, name)
    else:
        print 'freevo still running, run \'freevo stop\' to stop'
    sys.exit(0)

if python[0].find('python') != -1:
    python = [ python[0] , '-OO' ] + python[1:]

if len(proc) and not os.path.isfile(proc[0]):
    print 'Error: unable to start \'%s\'' % proc[0]
    print 'Either the helper does not exist or you need to run \'make\' first'
    sys.exit(0)

start(name, python + proc , bg, check)
