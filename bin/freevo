#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
# -----------------------------------------------------------------------------
# main.py - This is the Freevo main application code
# -----------------------------------------------------------------------------
# $Id$
#
# This file is the python start file for Freevo. It handles the init phase like
# checking the python modules, loading the plugins and starting the main menu.
#
# It also contains the splashscreen.
#
# TODO: o add background mode
#       o add --start, --stop and --restart
#
# First edition: Krister Lagerstrom <krister-freevo@kmlager.com>
# Maintainer:    Dirk Meyer <dischi@freevo.org>
#
# -----------------------------------------------------------------------------
# Freevo - A Home Theater PC framework
# Copyright (C) 2002-2005 Krister Lagerstrom, Dirk Meyer, et al.
# Please see the file doc/CREDITS for a complete list of authors.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MER-
# CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# -----------------------------------------------------------------------------

# python imports
import os
import sys, time
import traceback
import signal

import logging
import logging.config

# get logging object
log = logging.getLogger()

# insert freevo path information
__site__ = '../lib/python%s.%s/site-packages' % sys.version_info[:2]
__site__ = os.path.abspath(os.path.join(os.path.dirname(__file__), __site__))
if not __site__ in sys.path:
    sys.path.insert(0, __site__)

#
# kaa checking
#
try:
    import kaa
    import kaa.notifier
except ImportError:
    d = os.path.dirname(__file__)[:-15]
    print 'The kaa module repository could not be loaded!'
    print
    print 'Please check out the kaa repository from SVN'
    print 'svn co svn://svn.freevo.org/kaa/trunk kaa'
    print
    print 'Please install it as root into your system or into the same'
    print 'directory you installed Freevo in'
    print
    print 'Kaa is under development right now. Make sure you update the kaa'
    print 'directory every time you update freevo.'
    print
    sys.exit(1)

try:
    # i18n support

    # First load the xml module. It's not needed here but it will mess
    # up with the domain we set (set it from freevo 4Suite). By loading it
    # first, Freevo will override the 4Suite setting to freevo
    try:
        from xml.utils import qp_xml
        from xml.dom import minidom
    except ImportError:
        pass

    # now load other modules to check if all requirements are installed
    import pysqlite2

    import freevo
    import freevo.plugin
    import freevo.ui

    config = freevo.ui.config

    # load config file
    cfgfile = os.path.expanduser('~/.freevo/freevo2.conf')
    if '-c' in sys.argv:
        cfgfile = sys.argv[sys.argv.index('-c')+1]

    if not os.path.isfile(cfgfile):
        print '%s does not exist' % cfgfile
        print 'The file is now created and Freevo will stop so you can'
        print 'adjust the config settings.'
        print 'You should recheck freevo2.conf after every svn update. Use'
        print '\'freevo setup\' to rebuild the file without starting freevo.'
        print 'Your settings will be saved when the config file is rewritten.'
        config.load(cfgfile, create=True)
        sys.exit(0)

    config.load(cfgfile, create=True)
    if len(sys.argv) > 1 and sys.argv[1] in ('setup', '--setup', 'config', '--config'):
        print 'wrote %s' % cfgfile
        sys.exit(0)

    if config.debug:
        # FIXME: make it possible to set debug for specific parts.
        # Maybe use an environment variable and hock it into freevo.core
        # or kaa.base.
        logging.getLogger().setLevel(logging.INFO)

    config.watch()
    
    # plugins is a list of known plugins
    num_plugins = 0
    for p in freevo.ui.plugins:
        c = config
        for attr in p.split('.'):
            c = getattr(c, attr)
        if c.activate:
            p = p.replace('plugin.', '').replace('..', '.')
            num_plugins += 1
            if isinstance(c.activate, bool):
                freevo.plugin.activate(p)
            else:
                freevo.plugin.activate(p, level=c.activate)
    
    if config.gui.display.engine.lower() == 'sdl':
        import pygame

except ImportError, i:
    print 'ImportError: %s' % i
    print 'Not all requirements of Freevo are installed on your system.'
    print 'Please check the INSTALL file for more informations.'
    print
    sys.exit(0)


#
# daemon mode
#
# start freevo with --daemon and it will only start a small helper that
# will wait for an ir command to start freevo
#

if len(sys.argv) == 2 and sys.argv[1] in ('-daemon', '--daemon', '-d'):
    from kaa.input import lirc

    def handle_key(key):
        if not key in ( 'EXIT', 'POWER' ):
            return True
        lirc.stop()
        options = ''
        if config.gui.display.engine.lower() in ( 'imlib2', ) and not \
               (os.environ.has_key('DISPLAY') and os.environ['DISPLAY']):
            options = '-fs'
        log.info('start freevo %s', options)
        os.system('%s %s >/dev/null 2>/dev/null' % (sys.argv[0], options))
        lirc.init('freevo', config.input.plugin.lirc.lircrc)
        log.info('freevo stopped')
        return True

    if not lirc.init('freevo', config.input.plugin.lirc.lircrc):
        log.error('Could not initialize PyLirc!')
        sys.exit(1)

    kaa.notifier.signals['lirc'].connect(handle_key)
    log.info('daemon running')
    kaa.main.start()
    log.info('daemon done')
    sys.exit(1)

#
# Fullscreen X mode
#
# Start a new X server and run Freevo as windowmanager in fullscreen mode. This
# could require xrandr in the future to have a better effect
#
if len(sys.argv) == 2 and sys.argv[1] in ('-fs', '--fullscreen', '-f'):
    # start X server and run freevo, ignore everything else for now
    server_num = 0
    while 1:
        if not os.path.exists('/tmp/.X11-unix/X' + str(server_num)):
            break
        server_num += 1
    sys.stdin.close()
    os.execvp('xinit', [ 'xinit', sys.argv[0], '-force-fs',  '--', ':'+str(server_num) ])

# freevo imports
from freevo import beacon
from freevo.ui.gui import theme, widgets, animation, displays, areas

# load the fxditem to make sure it's the first in the
# mimetypes list
import freevo.ui.fxditem

# freevo core imports
import freevo.ipc

from freevo.ui.mainmenu import MainMenu

class Splashscreen(areas.Area):
    """
    A simple splash screen for osd startup
    """
    def __init__(self, text, max_value):
        areas.Area.__init__(self, 'content')
        self.max_value = max_value
        self.text      = text
        self.bar       = None
        self.engine    = areas.Handler('splashscreen', ('screen', self))
        self.engine.show()


    def clear(self):
        """
        clear all content objects
        """
        self.bar.unparent()
        self.text.unparent()


    def update(self):
        """
        update the splashscreen
        """
        if self.bar:
            return

        settings = self.settings
        x0, x1 = settings.x, settings.x + settings.width
        y = settings.y + settings.font.font.height + settings.spacing

        self.text = self.drawstring(self.text, settings.font, settings,
                                    height=-1, align_h='center')
        self.bar = widgets.Progressbar((x0, y), (x1-x0, 20), 2, (0,0,0),
                                       None, 0, None, (0,0,0,95), 0,
                                       self.max_value)
        self.layer.add_child(self.bar)


    def progress(self):
        """
        set the progress position and refresh the screen
        """
        if self.bar:
            self.bar.tick()
        if self.engine:
            self.engine.draw(None)


    def hide(self):
        """
        fade out
        """
        self.engine.hide(config.gui.theme.fadestep)


    def destroy(self):
        """
        destroy the object
        """
        del self.engine


#
# Freevo main function
#

# parse arguments
if len(sys.argv) >= 2:

    # force fullscreen mode
    # deactivate screen blanking and set osd to fullscreen
    if '-force-fs' in sys.argv[1]:
        os.system('xset -dpms s off')
        displays.fullscreen = True

try:
    freevo.ipc.Instance('freevo')

    # create gui
    displays.create()

    # Fire up splashscreen and load the plugins
    splash = Splashscreen(_('Starting Freevo, please wait ...'), num_plugins-1)

    # load plugins
    freevo.plugin.init(freevo.ui, splash.progress)

    # fade out the splash screen
    splash.hide()

    # prepare again, now that all plugins are loaded
    theme.get().prepare()

    # start menu
    MainMenu()

    # Wait for the startup animation. This is a bad hack but we won't
    # be able to remove our splashscreen otherwise. Big FIXME!
    animation.render().wait()

    # delete splash screen
    splash.destroy()
    del splash

    # start main loop
    kaa.main.start()

except SystemExit:
    kaa.notifier.shutdown()

except:
    log.exception('Crash!')
    kaa.notifier.shutdown()
